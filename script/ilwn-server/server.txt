Хостинг на Yandex.Cloud:
------------------------
  Имя: ilwn-server (зона ru-central1-a)
  IP виртуальной машины: 51.250.64.23
  OS: Ubuntu 18.04 + Nginx (LEMP)


Кратко об архитектуре:
----------------------
Веб-сайт работает в Yandex.Cloud на связке виртуальной машины в облаке Compute Cloud и двух
бакетов (www. и dl.) в Object Storage. Виртуальная машина под управлением Ubuntu, веб-сервер
Nginx, создана на базе образа "LEMP от Yandex.Cloud" (Cloud Marketplace).

В качестве платформы пока используется самая дешёвая конфигурация (Intel Cascade Lake, 5% 2x
vCPU, 1Gb RAM, 10Gb HDD). Результат нагрузочного тестирования показал, что такая конфигурация
способна обрабатывать до 10 RPS без существенного увеличения времени отклика (только статика
веб-сайта, без учёта сервера на PHP + MySQL для распределённых вычислений).

Для веб-сайта Nginx выполняет роль обратного прокси-сервера. Файлы сайта расположены в двух
бакетах (основном www. для dmaslov.me и дополнительном dl. для субдомена загрузок).


Ключи для доступа к северу по SSH:
----------------------------------
При создании виртуальной машины понадобится имя пользователя и ключ для доступа. Имя может
быть любым (кроме зарезервированных, например root). Для создания пары ключей (приватного
и публичного) нужно выполнить в командной строке "ssh-keygen -t rsa -b 2048". Далее для
подключения к серверу по SSH (в Windows 10) из командной строки "ssh user@ip-address".


Обмен файлами с сервером:
-------------------------
Для обмена файлами с сервером используется WinSCP. Для её работы необходимо также установить
пакет PuTTY. Перед коннектом WinSCP к серверу необходимо, чтобы был запущен агент аутентификации
Pageant (из пакета PuTTY), и в него загружен приватный ключ SSH. Файл этого ключа должен иметь
формат .ppk. Для его создания используется утилита PuTTYgen из пакета PuTTY: в её меню Conversions
нужно выбрать Import key и указать файл с приватным ключом (обычно это файл .ssh/id_rsa в директории
пользователя), и затем сохранить приватный ключ в формате .ppk, нажав кнопку "Save private key".


Обновление Nginx до последней стабильной версии:
------------------------------------------------
В оригинальном образе от Yandex версия Nginx будет 1.14.0, через apt по умолчанию обновляться не
будет ни автоматически, ни вручную. Инструкция по установке (обновлению) имеется на официальном
сайте: https://nginx.org/en/linux_packages.html#Ubuntu (один из последних шагов для изменения
файла /etc/apt/preferences.d нужно пропустить, т.к. настройки по умолчанию у нас не было).

Для обновления до последней стабильной версии нужно выполнить команду "sudo apt install nginx"
(не забыв перед этим обновить кеш компонент командой "sudo apt update"). Чтобы обновиться на
другую версию, например, 1.18: "sudo apt install nginx=1.18.*".

Если нужно запретить автоматическое обновление Nginx по расписанию, то нужно выполнить команду
"sudo apt-mark hold nginx". Эта же команда с параметром "unhold" отменит холд. Чтобы увидеть
состояние холда для всех компонент - "sudo apt-mark showhold".

После выполнения инструкции с официального сайта команда "apt update" нанёт выдавать предупреждение
об отсутствии поддержки архитектуры i386 репозиторием Nginx. Исправляется это добавлением в первую
строку файла "/etc/apt/sources.list.d/nginx.list" параметра "arch=amd64" в квадратных скобках после
слова "deb".


Начальная настройка веб-сервера Nginx:
--------------------------------------
В /usr/share/nginx/ нужно создать 3 директории: dmaslov.me, dl.dmaslov.me и dmaslov.name. А также
изменить им группу (на пользователя, под которым мы заходим по SSH) и дать разрешение 775, например
командой "chmod g+rw". Затем скопировать на сервер (в /etc/nginx/) файл настроек Nginx nginx.conf,
файлы dmaslov.* - в директорию /etc/nginx/sites-available/ и сделать на них символьные ссылки в
/etc/nginx/sites-enabled/, а также удалить ссылку /etc/nginx/sites-enabled/default.


Настройка HTTPS для веб-сервера:
--------------------------------
Для получения сертификатов используется certbot, установленный через apt:
  1) sudo apt install certbot
  2) sudo apt install python-certbot-nginx
  3) sudo certbot --nginx -d dmaslov.me,www.dmaslov.me,dl.dmaslov.me
  4) sudo certbot --nginx -d dmaslov.name,www.dmaslov.name

Сейчас certbot сам всё настраивает в системе для автоматического обновления сертификата. Но если
по какой-то причине не был установлен таймер (см. "systemctl list-timers") или задача в crontab
(см. "cat /etc/cron.d/certbot"), то можно добавить самостоятельно:
  5) sudo crontab -e (в первый раз будет предложено выбрать редактор)
  6) добавляем в конец строку "45 23 * * * root /usr/bin/certbot -q renew"
  7) Ctrl-O + Enter, чтобы сохранить изменения, и Ctrl-X, чтобы выйти (для редактора nano)


Логи веб-сервера Nginx:
-----------------------
Логи веб-сервера расположены в директории /var/log/nginx. Можно немного поправить настройки
logrotate для логов Nginx командой "sudo nano /etc/logrotate.d/nginx": например, удобно будет
изменить разрешения (строка "create 644 nginx adm") и уменьшить длительность хранения логов
(строка "rotate 30", здесь число - это количество дней).


Включение/выключение сервера MySQL:
-----------------------------------
В образе от Yandex будет установлен MySQL. Если он не нужен, то его стоит выключить, чтобы не
расходовать напрасно оперативную память и ресурсы CPU (актуально для машин с 5% vCPU):
  1) sudo service mysql stop
  2) sudo systemctl disable mysql


Настройка первичного DNS-сервера:
---------------------------------
Для повышения отказоустойчивости дополнительно к двум DNS-серверам Яндекса (Cloud DNS), указанным
в панели регистратора доменного имени, на виртуальной машине поднят ещё один первичный DNS-сервер,
который дублирует все записи. Сделать это в автоматическом режиме невозможно, так как DNS сервера
Yandex не отдают конфигурационный файл, поэтому при необходимости внесения изменений в записи DNS,
это нужно делать и в файле /etc/bind/db.dmaslov.me, и в панели управления доменной зоной в сервисе
Яндекс облака Cloud DNS.

Для установки DNS сервера нужно выполнить команду "sudo apt install bind9". Далее добавить bind в
исключения брендмауэра: "sudo ufw allow Bind9". Затем скопировать в /etc/bind/ файл db.dmaslov.me,
а также файлы named.* и перезагрузить сервер DNS командой "sudo systemctl restart bind9". Позже
можно также будет использовать "sudo rndc reload" после изменения конфигурации зоны.

Для проверки корректности конфигурации сервера и зоны можно использовать команды:
  1) sudo named-checkconf
  2) named-checkzone dmaslov.me /etc/bind/db.dmaslov.me

Для корректной работы также понадобится открыть входящие соединения UDP и TCP на 53 порту:
  1) sudo iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT
  2) sudo iptables -A INPUT -p tcp -m tcp --dport 53 -j ACCEPT

Так как локальная сеть в облаке Yandex не поддерживает IPv6, то стоит сразу его выключить:
в последней строке файла "/etc/default/bind9" нужно добавить "-4", чтобы стало вот так:
OPTIONS="-u bind -4".

Чтобы проверить, что всё работает, нужно с другого ПК или виртуальной машины (желательно из
другой сети): "nslookup dmaslov.me server-ip" или "dig dmaslov.me @server-ip".


Swap-файл для операционной системы:
-----------------------------------
После создания машины из образа LEMP своп-файла в системе не будет. Чтобы создать и включить:
  1) sudo fallocate -l 768M /swapfile или sudo dd if=/dev/zero of=/swapfile bs=1M count=768
  2) sudo chmod 600 /swapfile
  3) sudo mkswap /swapfile
  4) sudo swapon /swapfile

Чтобы своп-файл автоматически смонтировался при перезагрузке машины нужно добавить в файл
/etc/fstab строку "/swapfile none swap sw 0 0".

Чтобы проверить, что получилось: "swapon --show" или "free -h". Чтобы изменить размер свопа или
выключить его: "sudo swapoff /swapfile". Затем удалить файл "sudo rm /swapfile". Если было нужно
изменить размер, то просто повторяем все шаги инструкции. Если было нужно отключить, то также
необходимо удалить соответствующую строку из файла /etc/fstab.

Для настройки работы свопа в системе есть параметр swappiness, а также vfs_cache_pressure. Значение
swappiness может быть от 1 до 100. Чем оно выше, тем агрессивнее система будет выгружать страницы в
swap-файл, пытаясь сэкономить оперативную память. Чем ниже скорость доступа к файловой системе, на
которой расположен своп-файл, тем ниже должно быть это значение. Значение по умолчанию 60 (текущее
установленое значение: 30).

Разумные пределы значений для vfs_cache_pressure: от 50 до 100. Чем выше, тем интенсивнее система
пытается выгружать из памяти файловый кеш. Слишком низкие значения могут привести к нехватке
памяти. Поэтому, всё, что ниже 80, нужно использовать аккуратно. Значение по умолчанию 100.

Чтобы посмотреть текущие значения:
  *) cat /proc/sys/vm/swappiness
  *) cat /proc/sys/vm/vfs_cache_pressure

Чтобы установить новое значение (будет активно только до перезагрузки):
  sudo sysctl vm.swappiness=50
  sudo sysctl vm.vfs_cache_pressure=80

Чтобы значения сохранились после перезагрузки (точнее, чтобы загрузились нужные вместо значений по
умолчанию), параметры со значениями нужно добавить в /etc/sysctl.conf в формате "param=value".


Нагрузочное тестирование веб-сервера:
-------------------------------------
Для нагрузочного тестирования удобно использовать siege (sudo apt install siege). Для запуска
теста: siege -t30s -c10 https://website/page (здесь 30S - это длительность теста, а 10 - это
количество пользователей/одновременных запросов). Делать это нужно, разумеется, с отдельной
виртуальной машины. Утилита siege также позволяет настроить сценарий тестирования.


Некоторые команды Ubuntu/Nginx:
-------------------------------
  *) sudo nginx -t -- проверить конфигурацию
  *) sudo nginx -s reload -- перезагрузить конфигурацию
  *) df -m -- показать все тома (свободное место на накопителях)
  *) top -- показать процессы и оперативную память (Q, чтобы выйти)
  *) sudo apt update и sudo apt upgrade -- ручное обновление компонент
  *) sudo apt autoclean и sudo apt clean -- очистка кэша обновлений
  *) sudo apt autoremove -- удаление ненужных компонент
  *) systemctl list-timers -- посмотреть все активные таймеры
  *) sudo apt-mark hold/unhold/showhold -- холд для компонент
  *) sudo service mysql stop/start -- управление работой сервера MySQL
  *) sudo systemctl disable/enable mysql -- управление автозапуском MySQL
  *) dd if=/dev/zero of=empty bs=1M count=N status=progress -- записать в файл ~/empty N блоков по 1MiB
  *) sudo fsfreeze -f / -- заблокировать запись в файловой системе (диска, смонтированного в /)
  *) sudo fsfreeze --unfreeze / -- снять блокировку записи файловой системы (диска в /)
  *) sync - сбросить все файловые кеши на физические накопители


Полезные ссылки:
----------------
  https://observatory.mozilla.org/ -- проверка безопасности веб-сайта
  https://ssl-config.mozilla.org/ -- помощь в настройке SSL на сервере
  http://www.ipdns.ru/ -- проверка корректности делегирования домена
  https://validator.w3.org/ -- проверка корректности разметки HTML
